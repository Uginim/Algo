<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mappers.learningDAO-mapper">
	<!-- 과목생성하기 -->
	<insert id="insertSubject" parameterType="SubjectVO">
		INSERT INTO Subject (
		    subject_num, 
		    title, 
		    user_num, 
		    image_data, 
		    image_size, 
		    image_type, 
		    image_name)
		VALUES
		    (SUBJECT_NUM_SEQ.nextval,
		    #{title},
		    #{userNum},
		    #{imageData,jdbcType=BLOB},
		    #{imageSize,jdbcType=NUMERIC},
		    #{imageType,jdbcType=VARCHAR},
		    #{imageName,jdbcType=VARCHAR})
		<selectKey order="AFTER" keyProperty="subjectNum" resultType="long">
			SELECT SUBJECT_NUM_SEQ.currval FROM dual
		</selectKey>	
	</insert>

	<insert id="insertUnit" parameterType="UnitVO">		
		INSERT INTO Unit (
		    UNIT_NUM, 
		    SUBJECT_NUM, 
		    CONTENT, 
		    TITLE, 
		    CHAPTER_DEPTH
		    )
		VALUES (
		    UNIT_NUM_SEQ.nextval,
		    #{subjectNum},
		    #{content},
		    #{title},
		    #{chapterDepth}
		)
		<selectKey keyProperty="unitNum" resultType="long" order="AFTER">
			SELECT UNIT_NUM_SEQ.currval FROM dual
		</selectKey>
	</insert>
	<!-- 새로운 마무리문제 생성 -->
	<insert id="insertQuiz" parameterType="QuizVO">
		INSERT INTO Quiz (
		    QUIZ_NUM, 
		    UNIT_NUM, 
		    TITLE, 
		    CONTENT, 
		    CORRECT_ANSWER, 
		    SOLUTION, 
		    USER_NUM
		    )
		VALUES (
		    QUIZ_NUM_SEQ.nextval,
		    #{unitNum},
		    #{title},
		    #{content},
		    #{correctAnswer,jdbcType=VARCHAR},
		    #{solution,jdbcType=VARCHAR},
		    #{userNum}
		)
		<selectKey order="AFTER" keyProperty="quizNum" resultType="long">
			SELECT QUIZ_NUM_SEQ.currval FROM Dual
		</selectKey>
	</insert>

	<!-- 새로운 답안 생성 -->
	<insert id="insertAnswer" parameterType="QuizAnswerVO" >
		INSERT INTO Quiz_answer (
		    ANSWER_NUM, 
		    QUIZ_NUM, 
		    CONTENT, 
		    IS_CORRECT
		) VALUES (
		    ANSWER_NUM_SEQ.nextval,
		    #{quizNum},
		    #{content},
		    #{correct}
		)
		<selectKey resultType="long" order="AFTER" keyProperty="answerNum">
			SELECT ANSWER_NUM_SEQ.currval FROM dual
		</selectKey>
	</insert>

	<!-- 과목목록 -->
	<!-- 1/전체목록 -->
	<select id="selectSubjectList" resultType="SubjectVO">
		select
		subject_num as "subjectNum",
		title,
		created_at as "createdAt",
		updated_at as "updatedAt",
		user_num as "userNum",
		image_data as
		"imageData"
		FROM(select row_number() over(order by
		subject_num desc) as
		num,
		subject_num,
		title,
		created_at,
		updated_at,
		user_num,
		image_data from
		subject
		<if test="searchType != null and keywords != null">
			where
			<foreach item="keyword" collection="keywords" open="("
				separator="or" close=")">
				<choose>
					<!-- 제목 -->
					<when test="searchType == 'T'.toString()">
						title like '%'||#{keyword}||'%'
					</when>
					<!-- 작성자 -->
					<when test="searchType == 'N'toString()">
						userNum like '%'||#{keyword}||'%'
					</when>
					<otherwise>
						title like '%'||#{keyword}||'%' or userNum like
						'%'||#{keyword}||'%'
					</otherwise>
				</choose>
			</foreach>
		</if>
		)
	</select>
	<!-- 사용자가 작성한 모든과목들가져오기 -->
	<select id="selectAllUserSubjects" parameterType="hashmap" resultType="SubjectVO">
		select	*
		FROM(
			select row_number() over(order by subject_num desc) as	num,
			subject_num as "subjectNum",
			title,
			created_at as "createdAt",
			updated_at as "updatedAt",
			user_num as "userNum"
			from subject
			<if test="searchType != null and keywords != null">
				where user_num = #{userNum}
				<foreach item="keyword" collection="keywords" open="AND ("
					separator="or" close=")">
					<choose>
						<!-- 제목 -->
						<when test="searchType == 'T'.toString()">
							title like '%'||#{keyword}||'%'
						</when>
						<!-- 작성자 -->
						<when test="searchType == 'N'toString()">
							userNum like '%'||#{keyword}||'%'
						</when>
						<otherwise>
							title like '%'||#{keyword}||'%' or userNum like
							'%'||#{keyword}||'%'
						</otherwise>
					</choose>
				</foreach>
			</if>
			)
		<if test="startRowNum != null and endRowNum != null">
			WHERE num between #{startRowNum} and #{endRowNum}
		</if>
	</select>

	<!-- 총 레코드 수 -->
	<select id="countTotalRecord" parameterType="map"
		resultType="int">
		select count(subject.subject_num) as countTotal
		from subject
		<if test="searchType !=null and keywords !=null">
			where
			<foreach item="keyword" collection="keywords" open="("
				separator="or" close=")">
				<choose>
					<!-- 제목 -->
					<when test="searchType == 'T'.toString()">
						title like '%'||#{keyword}||'%'
					</when>
					<!-- 작성자 -->
					<when test="searchType == 'N'.toString()">
						userNum like '%'||#{keyword}||'%'
					</when>
					<otherwise>
						title like '%'||#{keyword}||'%' or userNum like
						'%'||#{keyword}||'%'
					</otherwise>
				</choose>
			</foreach>
		</if>




	</select>
<!-- 단원의 리스트를 불러온다 -->
	<select id="selectUnitList" parameterType="hashmap" resultType="UnitVO">
		select
		Unit_num as
		"unitNum",
		subject_num as "subjectNum",
		content,
		title,
		chapter_depth as
		"chapterDepth",
		created_at as "createdAt",
		updated_at as "updatedAt"
		from unit where subject_num like #{subjectNum}


	</select>
	
	<!-- 내용을 제외한 unit의 데이터들의 리스트를 가져옴 -->
	<select id="selectAllUnitMetadatas" parameterType="hashmap" resultType="UnitVO">
		SELECT
		unit_num as "unitNum",
		subject_num as "subjectNum",
		title,
		chapter_depth as "chapterDepth",
		created_at as "createdAt",
		updated_at as "updatedAt"
		FROM unit 
		WHERE subject_num = #{subjectNum}
	</select>

	<select id="selectOneUnit" resultType="UnitVO">
		select
		Unit_num as
		"unitNum",
		subject_num as "subjectNum",
		content,
		title,
		chapter_depth as
		"chapterDepth",
		created_at as "createdAt",
		updated_at
		as "updatedAt"
		from
		unit where unit_num like #{unitNum}


	</select>

	<!-- 과목 하나 불러오기 -->
	<select id="selectOneSubject" parameterType="long" resultType="SubjectVO">
		SELECT 
		    subject_num AS "subjectNum",
		    title AS "title",
		    user_num AS "userNum",
		    created_at AS "createdAt",
		    updated_at AS "updatedAt",
		    image_data AS "imageData",
		    image_size AS "imageSize",
		    image_type AS "imageType",
		    image_name AS "imageName"
		FROM Subject
		WHERE subject_num = #{subjectNum}
	</select>

	<!-- 마무리문제 불러오기 -->
	<!-- <select id="selectQuizList" resultType="QuizVO"> select quiz_num as 
		"quizNum", unit_num as "unitNum", title, content, correct_answer as "correcAnswer", 
		solution, created_at as "createdAt", updated_at as "updatedAt", user_num 
		as "userNum" from quiz where unit_num like #{unitNum} </select> -->

	<!-- 마무리문제 답안지 불러오기 -->
	
	<select id="selectQuizList" resultType="QuizVO" resultMap="QuizVOMap">

		select
		t1.quiz_num as "quizNum",
		t1.unit_num as "unitNum",
		t1.title,
		t1.content,
		t1.correct_answer as
		"correctAnswer",
		t1.solution,

		t1.user_num as "userNum",
		t2.answer_num as "answer.answerNum",
		t2.quiz_num as "answer.quizNum",
		t2.is_correct as "answer.isCorrect",
		t2.content as "answer.content"
		from quiz t1 left
		join quiz_answer t2
		on t1.quiz_num = t2.quiz_num
		where t1.unit_num like
		#{unitNum}

	</select>
	
	<resultMap type="QuizAnswerVO" id="QuizAnswerVO">
		<!-- <id property="answerNum" column="answerNum" /> -->
		<result column="answer.answerNum" property="answerNum" />
		<result column="answer.content" property="content" />
		<result column="answer.quizNum" property="quizNum" />
		


	</resultMap>
	<resultMap type="QuizVO" id="QuizVOMap">
		<result column="quizNum" property="quizNum" />
		<result column="title" property="title" />
		<result column="content" property="content" />
		<result column="correctAnswer" property="correctAnswer" />
		<result column="userNum" property="userNum" />
		<collection property="answerList" resultMap="QuizAnswerVO" />
	</resultMap>

	<!-- 한 개의 마무리문제를 열람 -->
	<select id="selectOneQuiz" parameterType="long" resultType="QuizVO">
		SELECT 
		    QUIZ_NUM AS "quizNum", 
		    UNIT_NUM AS "unitNum", 
		    TITLE AS "title", 
		    CONTENT AS "content", 
		    CORRECT_ANSWER AS "correctAnswer", 
		    SOLUTION AS "solution", 
		    CREATED_AT AS "createdAt", 
		    UPDATED_AT AS "updatedAt",
		    USER_NUM AS "userNum"
		FROM Quiz
		WHERE quiz_num =#{quizNum}
	</select>
	
<!-- 퀴즈(마무리문제) 답안	 -->
	<select id="selectAnswerList" parameterType="long" resultType="QuizAnswerVO">
		SELECT 
		    ANSWER_NUM AS "answerNum", 
		    QUIZ_NUM AS "quizNum", 
		    CONTENT AS "content", 
		    IS_CORRECT AS "isCorrect", 
		    CREATED_AT AS "createdAt", 
		    UPDATED_AT AS "updatedAt"
		FROM Quiz_answer
		WHERE quiz_num = #{quizNum}
	</select>
	<!-- 답안 한개 조회	 -->
	<select id="selectOneAnswer" parameterType="long" resultType="QuizAnswerVO">
		SELECT 
		    ANSWER_NUM AS "answerNum", 
		    QUIZ_NUM AS "quizNum", 
		    CONTENT AS "content", 
		    IS_CORRECT AS "isCorrect", 
		    CREATED_AT AS "createdAt", 
		    UPDATED_AT AS "updatedAt"
		FROM Quiz_answer
		WHERE ANSWER_NUM = #{answerNum}
	</select>
	
<!--  Update  -->
	<!-- 과목 내용 변경 -->
	<update id="updateSubject" parameterType="SubjectVO">
		UPDATE subject
		SET
		    title= #{title}, 
		    user_num = #{userNum}, 
		    updated_at = SYSTIMESTAMP,
		    IMAGE_DATA = #{imageData, jdbcType=BLOB}, 
		    IMAGE_SIZE = #{imageSize, jdbcType=NUMERIC}, 
		    IMAGE_TYPE = #{imageType, jdbcType=VARCHAR}, 
		    IMAGE_NAME = #{imageType, jdbcType=VARCHAR}
		WHERE subject_num = #{subjectNum}	
	</update>
	<!-- 단원 내용 편집 -->
	<update id="updateUnit" parameterType="UnitVO">
		UPDATE Unit
		SET      
		    SUBJECT_NUM = #{subjectNum}, 
		    CONTENT = #{content}, 
		    TITLE = #{title}, 
		    CHAPTER_DEPTH = #{chapterDepth},
		    UPDATED_AT = SYSTIMESTAMP
		WHERE UNIT_NUM = #{unitNum}	
	</update>
	<!-- 마무리문제 내용 편집	 -->
	<update id="updateQuiz" parameterType="QuizVO">
		UPDATE Quiz 
		SET
		    UNIT_NUM = #{unitNum}, 
		    TITLE = #{title}, 
		    CONTENT =#{content}, 
		    CORRECT_ANSWER = #{correctAnswer}, 
		    SOLUTION = #{solution},
		    UPDATED_AT = SYSTIMESTAMP
		WHERE QUIZ_NUM = #{quizNum}
	</update>
	<!-- 마무리문제 답안 수정 -->
	<update id="updateAnswer" parameterType="QuizAnswerVO">
		UPDATE Quiz_answer
		SET   
		    QUIZ_NUM = #{quizNum}, 
		    CONTENT = #{content}, 
		    IS_CORRECT = #{correct}, 
		    UPDATED_AT = SYSTIMESTAMP
		WHERE ANSWER_NUM = #{answerNum}
	</update>


<!-- Delete -->
	<!-- 과목 삭제 -->
	<delete id="deleteSubject" parameterType="long">
		DELETE FROM Subject
		WHERE subject_num = #{subjectNum}
	</delete>
	<!-- 단원 삭제 -->
	<delete id="deleteUnit" parameterType="long" >
		DELETE FROM unit 
		WHERE unit_num = #{unitNum}
	</delete>
	<!-- 마무리문제 삭제 -->
	<delete id="deleteQuiz" parameterType="long">
		DELETE FROM Quiz
		WHERE quiz_num = #{quizNum} 
	</delete>
	<!-- 마무리문제 답안 삭제	 -->
	<delete id="deleteAnswer" parameterType="long">
		DELETE FROM QUIZ_ANSWER
		WHERE answer_num = #{answerNum}
	</delete>













</mapper>