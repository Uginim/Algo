<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mappers.UserDAO-mapper">

	<!-- 사용자 생성 -->
	<insert id="insertUser" 
					parameterType="UserVO">
		INSERT INTO APP_USER 
		( user_num, 
		email, 
		pw, 
		tel, 
		username, 
		gender, 
		address, 
		birth,
		type)
		
		VALUES
		 
		(
		user_num_seq.nextval,
		#{email},
		#{pw},
		#{tel},
		#{username},
		#{gender},
		#{address},
		#{birth},
		'S')
		<selectKey keyProperty="userNum" order="AFTER" resultType="long">
			select user_num_seq.currval from dual
		</selectKey>	
	</insert>
<!-- 튜터 신청서 -->
<insert id="insertApplication" 
					parameterType="TutorApplicationVO">
				Insert into tutor_application (
					application_num, 
					user_num,
					title,
					content,
					approval,
					attachment_data,
					attachment_size,
					attachment_name,
					attachment_type
				) values(
				TUTOR_APPLICATION_NUM_SEQ.nextval,
				#{userNum},
				#{title},
				#{content},
				#{approval},
				#{attachmentData,jdbcType=BLOB},
				#{attachmentSize,jdbcType=NUMERIC},
				#{attachmentName,jdbcType=VARCHAR},
				#{attachmentType,jdbcType=VARCHAR}
				)
<selectKey keyProperty="applicationNum" order="AFTER" resultType="long">
			select TUTOR_APPLICATION_NUM_SEQ.currval from dual
</selectKey>
</insert>
<!-- 사용자 전체조회 -->
<select id="selectAllUser"
				resultType="UserVO">
		SELECT user_num as "uesrNum", email, pw, tel, username, type,
		       gender,  address,  birth, created_at AS "createdAt", updated_at AS "updatedAt" 
		FROM APP_USER 
</select>

<!-- 사용자 개별조회 -->
<!-- 이메일 및 비밀번호로 조회 -->
<select id="selectUser" 
				parameterType="hashmap"
				resultType="UserVO">
		SELECT user_num as "userNum", email, pw, tel, username, type,
		       gender, address, birth, created_at AS  "createdAt", updated_at AS "updatedAt"
		  FROM APP_USER    
		 where email = #{email} 
		 <if test="pw != null">
		 	AND pw = #{pw}
		 </if> 
</select>
<!-- 유저번호로 조회 -->
<select id="selectUser2" 
				parameterType="hashmap"
				resultType="UserVO">
		SELECT user_num as "uesrNum", email, pw, tel, username, type,
		       gender, address, birth, created_at AS  "createdAt", updated_at AS "updatedAt"
		  FROM APP_USER    
		 where user_Num = #{userNum} 
</select>
<!-- 튜터신청서 목록 조회 -->
<select id="selectAllTutorApplication" parameterType="hashmap" resultType="TutorApplicationVO">
	SELECT *
	FROM
		(SELECT 
			ROW_NUMBER() OVER(ORDER BY tutor_application.CREATED_AT DESC) AS "num",
			tutor_application.UPDATED_AT AS "updatedAt", 
			TITLE,  
			CONTENT, 
			tutor_application.USER_NUM AS "userNum", 
			APPLICATION_NUM AS "applicationNum", 
			tutor_application.CREATED_AT AS "createdAt",
			APPROVAL
			FROM tutor_application, APP_USER
			WHERE app_user.user_num = tutor_application.user_num)
	WHERE 
	 "num" between #{startRowNum} and #{endRowNum}
	 
</select>
<!-- 튜터신청서 총 개수 -->
<select id="getTotalApplicationNum" resultType="long">
	SELECT count(*) 
	FROM tutor_application
</select>

<!-- 사용자 수정 -->
<update id="updateUser"
				parameterType="UserVO">
		update APP_USER
		   set tel = #{tel},
		       username = #{username},
					 gender = #{gender},
					 address = #{address},
					 birth = #{birth},
					 email = #{email},
					 type = ${type},
					 updated_at = systimestamp
		 where user_num = #{userNum}
</update>
<!-- 비밀번호 변경 -->
<update id="changePW2"
				parameterType="hashmap">
		update APP_USER 
		   set pw = #{newPw} 
		 where email=#{email}
		 AND pw =#{oldPw} 
</update>
<update id="changePW"
				parameterType="hashmap">
		update APP_USER 
		   set pw = #{newPw} 
		 where user_num=#{userNum}
		 AND pw =#{oldPw} 
</update>
<!-- 사용자 삭제 -->
<delete id="deleteUser" 
				parameterType="hashmap">
		delete from APP_USER 
		where
		<choose>
			<when test="email !=null and pw != null">
				email=#{email} and pw=#{pw}
			</when>
			<when test="userNum !=null">
				user_num = #{userNum}
			</when>
			<otherwise>
				1 = 0
			</otherwise>		
		</choose> 
</delete>
</mapper>